### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Job {
  city: String
  creatorId: String
  id: String
  ownerId: String
  postcode: String
  street: String
  suburb: String
}

input JobCreateInput {
  city: String!
  creatorId: String!
  ownerId: String!
  postcode: String!
  street: String!
  suburb: String!
}

type Mutation {
  createJob(city: String!, postcode: String!, street: String!, suburb: String!): Job
  deleteUser(email: String!): UserAdminMessage
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, firstName: String!, image: String!, lastName: String!, password: String!, phone: String!, role: String!): AuthPayload
  updateUser(email: String!, firstName: String!, image: String!, lastName: String!, password: String!, phone: String!): User
}

type Query {
  allUsers: [User!]!
  findUsersCreatedJobsByEmail(email: String!): [Job!]!
  findUsersOwnedJobsByEmail(email: String!): [Job!]!
  getUserType(role: Role!): [User!]!
  me: User
  usersCreatedJobs: [Job!]!
  usersOwnedJobs: [Job!]!
}

enum Role {
  admin
  driver
  office
}

type User {
  createdJobs: [Job]
  email: String
  firstName: String
  id: String
  image: String
  lastName: String
  ownedJobs: [Job]
  password: String
  phone: String
  role: Role
}

type UserAdminMessage {
  message: String
  success: Boolean
}

input UserCreateInput {
  email: String!
  firstName: String!
  image: String!
  lastName: String!
  phone: String!
  role: Role!
}

input UserUniqueInput {
  email: String!
  id: String!
}