### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Job {
  bookingDateTime: DateTime
  city: String
  createdAt: DateTime
  firstConfirm: Boolean
  id: String
  jobStatus: JobStatus
  ownerId: String
  postcode: String
  quote: Int
  revenue: Int
  secondConfirm: Boolean
  street: String
  suburb: String
  timeWindow: TimeWindow
  typeOfRubbish: [TypeOfRubbish]
  updatedAt: DateTime
}

type JobAdminMessage {
  message: String
  success: Boolean
}

input JobCreateInput {
  bookingDateTime: DateTime!
  city: String!
  jobStatus: JobStatus!
  ownerId: String!
  postcode: String!
  street: String!
  suburb: String!
  timeWindow: TimeWindow!
  typeOfRubbish: [TypeOfRubbish!]!
}

enum JobStatus {
  cancelled
  created
  paid
  quoted
}

type Mutation {
  createJob(bookingDateTime: DateTime!, city: String!, postcode: String!, quote: Int!, street: String!, suburb: String!, timeWindow: TimeWindow!, typeOfRubbish: [TypeOfRubbish!]!): Job
  deleteJob(id: String!): JobAdminMessage
  deleteUser(email: String!): UserAdminMessage
  firstConfirmation(id: String!): JobAdminMessage
  login(email: String!, password: String!): AuthPayload
  secondConfirmation(id: String!): JobAdminMessage
  signup(email: String!, firstName: String!, image: String!, lastName: String!, password: String!, phone: String!, role: String!): AuthPayload
  updateJob(city: String!, firstConfirm: Boolean!, id: String!, jobStatus: JobStatus!, postcode: String!, quote: Int, revenue: Int, secondConfirm: Boolean!, street: String!, suburb: String!): Job
  updateUser(email: String!, firstName: String!, image: String!, lastName: String!, password: String!, phone: String!): User
}

type Query {
  allUsers: [User!]!
  findUsersOwnedJobsByEmail(email: String!): [Job!]!
  getUserType(role: Role!): [User!]!
  me: User
  usersOwnedJobs: [Job!]!
}

enum Role {
  admin
  driver
  office
}

enum TimeWindow {
  eight_am
  eleven_am
  five_pm
  four_pm
  nine_am
  none
  one_pm
  seven_am
  six_am
  ten_am
  three_pm
  twelve_pm
  two_pm
}

enum TypeOfRubbish {
  fridge
  mattress
  misc
  sofa
  washing_machine
}

type User {
  email: String
  firstName: String
  id: String
  image: String
  lastName: String
  ownedJobs: [Job]
  password: String
  phone: String
  role: Role
}

type UserAdminMessage {
  message: String
  success: Boolean
}

input UserCreateInput {
  email: String!
  firstName: String!
  image: String!
  lastName: String!
  phone: String!
  role: Role!
}

input UserUniqueInput {
  email: String!
  id: String!
}